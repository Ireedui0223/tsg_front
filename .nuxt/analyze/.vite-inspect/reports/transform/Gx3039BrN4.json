{
  "resolvedId": "C:/Users/Ireedui/Desktop/additional/tsg/front-latest/node_modules/nuxt/dist/app/components/client-only.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createElementBlock, createElementVNode, createStaticVNode, defineComponent, getCurrentInstance, h, onMounted, ref } from \"vue\";\nimport { getFragmentHTML } from \"./utils.js\";\nexport default defineComponent({\n  name: \"ClientOnly\",\n  inheritAttrs: false,\n  // eslint-disable-next-line vue/require-prop-types\n  props: [\"fallback\", \"placeholder\", \"placeholderTag\", \"fallbackTag\"],\n  setup(_, { slots, attrs }) {\n    const mounted = ref(false);\n    onMounted(() => {\n      mounted.value = true;\n    });\n    return (props) => {\n      if (mounted.value) {\n        return slots.default?.();\n      }\n      const slot = slots.fallback || slots.placeholder;\n      if (slot) {\n        return slot();\n      }\n      const fallbackStr = props.fallback || props.placeholder || \"\";\n      const fallbackTag = props.fallbackTag || props.placeholderTag || \"span\";\n      return createElementBlock(fallbackTag, attrs, fallbackStr);\n    };\n  }\n});\nconst cache = /* @__PURE__ */ new WeakMap();\n/*! @__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nexport function createClientOnly(component) {\n  if (cache.has(component)) {\n    return cache.get(component);\n  }\n  const clone = { ...component };\n  if (clone.render) {\n    clone.render = (ctx, ...args) => {\n      if (ctx.mounted$) {\n        const res = component.render?.bind(ctx)(ctx, ...args);\n        return res.children === null || typeof res.children === \"string\" ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag) : h(res);\n      } else {\n        const fragment = getFragmentHTML(ctx._.vnode.el ?? null) ?? [\"<div></div>\"];\n        return process.client ? createStaticVNode(fragment.join(\"\"), fragment.length) : h(\"div\", ctx.$attrs ?? ctx._.attrs);\n      }\n    };\n  } else if (clone.template) {\n    clone.template = `\n      <template v-if=\"mounted$\">${component.template}</template>\n      <template v-else><div></div></template>\n    `;\n  }\n  clone.setup = (props, ctx) => {\n    const instance = getCurrentInstance();\n    const attrs = instance.attrs;\n    const directives = extractDirectives(instance);\n    instance.attrs = {};\n    const mounted$ = ref(false);\n    onMounted(() => {\n      instance.attrs = attrs;\n      instance.vnode.dirs = directives;\n      mounted$.value = true;\n    });\n    return Promise.resolve(component.setup?.(props, ctx) || {}).then((setupState) => {\n      return typeof setupState !== \"function\" ? { ...setupState, mounted$ } : (...args) => {\n        if (mounted$.value) {\n          const res = setupState(...args);\n          return res.children === null || typeof res.children === \"string\" ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag) : h(res);\n        } else {\n          const fragment = getFragmentHTML(instance?.vnode.el ?? null) ?? [\"<div></div>\"];\n          return process.client ? createStaticVNode(fragment.join(\"\"), fragment.length) : h(\"div\", ctx.attrs);\n        }\n      };\n    });\n  };\n  cache.set(component, clone);\n  return clone;\n}\nfunction extractDirectives(instance) {\n  if (!instance || !instance.vnode.dirs) {\n    return null;\n  }\n  const directives = instance.vnode.dirs;\n  instance.vnode.dirs = null;\n  return directives;\n}\n",
      "start": 1700848824700,
      "end": 1700848825001,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1700848825001,
      "end": 1700848825001,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1700848825001,
      "end": 1700848825002,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { createElementBlock, createElementVNode, createStaticVNode, defineComponent, getCurrentInstance, h, onMounted, ref } from \"vue\";\nimport { getFragmentHTML } from \"./utils.js\";\nexport default defineComponent({\n  name: \"ClientOnly\",\n  inheritAttrs: false,\n  // eslint-disable-next-line vue/require-prop-types\n  props: [\"fallback\", \"placeholder\", \"placeholderTag\", \"fallbackTag\"],\n  setup(_, { slots, attrs }) {\n    const mounted = ref(false);\n    onMounted(() => {\n      mounted.value = true;\n    });\n    return (props) => {\n      if (mounted.value) {\n        return slots.default?.();\n      }\n      const slot = slots.fallback || slots.placeholder;\n      if (slot) {\n        return slot();\n      }\n      const fallbackStr = props.fallback || props.placeholder || \"\";\n      const fallbackTag = props.fallbackTag || props.placeholderTag || \"span\";\n      return createElementBlock(fallbackTag, attrs, fallbackStr);\n    };\n  }\n});\nconst cache = /* @__PURE__ */ new WeakMap();\n/*! @__NO_SIDE_EFFECTS__ */\n// @__NO_SIDE_EFFECTS__\nexport function createClientOnly(component) {\n  if (cache.has(component)) {\n    return cache.get(component);\n  }\n  const clone = { ...component };\n  if (clone.render) {\n    clone.render = (ctx, ...args) => {\n      if (ctx.mounted$) {\n        const res = component.render?.bind(ctx)(ctx, ...args);\n        return res.children === null || typeof res.children === \"string\" ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag) : h(res);\n      } else {\n        const fragment = getFragmentHTML(ctx._.vnode.el ?? null) ?? [\"<div></div>\"];\n        return true ? createStaticVNode(fragment.join(\"\"), fragment.length) : h(\"div\", ctx.$attrs ?? ctx._.attrs);\n      }\n    };\n  } else if (clone.template) {\n    clone.template = `\n      <template v-if=\"mounted$\">${component.template}</template>\n      <template v-else><div></div></template>\n    `;\n  }\n  clone.setup = (props, ctx) => {\n    const instance = getCurrentInstance();\n    const attrs = instance.attrs;\n    const directives = extractDirectives(instance);\n    instance.attrs = {};\n    const mounted$ = ref(false);\n    onMounted(() => {\n      instance.attrs = attrs;\n      instance.vnode.dirs = directives;\n      mounted$.value = true;\n    });\n    return Promise.resolve(component.setup?.(props, ctx) || {}).then((setupState) => {\n      return typeof setupState !== \"function\" ? { ...setupState, mounted$ } : (...args) => {\n        if (mounted$.value) {\n          const res = setupState(...args);\n          return res.children === null || typeof res.children === \"string\" ? createElementVNode(res.type, res.props, res.children, res.patchFlag, res.dynamicProps, res.shapeFlag) : h(res);\n        } else {\n          const fragment = getFragmentHTML(instance?.vnode.el ?? null) ?? [\"<div></div>\"];\n          return true ? createStaticVNode(fragment.join(\"\"), fragment.length) : h(\"div\", ctx.attrs);\n        }\n      };\n    });\n  };\n  cache.set(component, clone);\n  return clone;\n}\nfunction extractDirectives(instance) {\n  if (!instance || !instance.vnode.dirs) {\n    return null;\n  }\n  const directives = instance.vnode.dirs;\n  instance.vnode.dirs = null;\n  return directives;\n}\n",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "vite:css-post",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1700848825002,
      "end": 1700848825002,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1700848825002,
      "end": 1700848825003,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1700848825003,
      "end": 1700848825003,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1700848825003,
      "end": 1700848825003,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1700848825003,
      "end": 1700848825003,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1700848825003,
      "end": 1700848825003,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1700848825003,
      "end": 1700848825004,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1700848825004,
      "end": 1700848825004,
      "order": "normal"
    }
  ]
}
